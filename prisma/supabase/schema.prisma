generator client {
  provider = "prisma-client-js"
  output   = "../generated/supabase"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                String          @id @default(cuid())
  email             String?         @unique
  emailVerified     DateTime?
  passwordHash      String?
  displayName       String?
  displayImage      String?
  disabled          Boolean?
  weeklyDigestEmail Boolean         @default(false)
  role              UserRole        @default(USER)
  createdAt         DateTime        @default(now())
  accounts          Account[]
  blocking          Block[]         @relation("blocker")
  blockedBy         Block[]         @relation("blocking")
  enrolledEvents    EnrolledEvent[]
  flags             Flag[]
  likes             Like[]
  posts             Post[]
  tokens            Token[]
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([token, type])
  @@index([userId])
}

model Post {
  id            String   @id @default(cuid())
  content       String
  createdBy     String?
  baseLikeCount Int?
  parentId      String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  flags         Flag[]
  likes         Like[]
  parent        Post?    @relation("comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments      Post[]   @relation("comments")
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id, userId])
  @@index([userId])
  @@index([parentId])
}

model Like {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Flag {
  comment   String?
  resolved  Boolean  @default(false)
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Block {
  blockerId  String
  blockingId String
  blocker    User   @relation("blocker", fields: [blockerId], references: [id], onUpdate: NoAction)
  blocking   User   @relation("blocking", fields: [blockingId], references: [id], onUpdate: NoAction)

  @@id([blockerId, blockingId])
  @@index([blockerId])
  @@index([blockingId])
}

model Prompt {
  id      String @id @default(cuid())
  content String
}

model EnrolledEvent {
  id     String   @id @default(cuid())
  name   String
  slug   String
  start  DateTime @default(now())
  end    DateTime
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
